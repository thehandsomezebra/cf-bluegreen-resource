#!/bin/bash

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

BRed='\033[1;31m'    # Bold red
BGreen='\033[1;32m'  # Bold Green
BBlue='\033[1;34m'   # Bold Blue
BYellow='\033[1;33m' # Bold Yellow
NC='\033[0m'         # No Color

source=$1
if [[ -z "$source" ]]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi
# for jq
PATH=/usr/local/bin:$PATH
export TMPDIR=${TMPDIR:-/tmp/bluegreen}
mkdir -p "${TMPDIR}"
payload=$(mktemp "$TMPDIR/resource-request.XXXXXX")
cat >"$payload" <&0

#from the task
org=$(jq -r '.params.org // ""' <"$payload")                           #required
space=$(jq -r '.params.space // ""' <"$payload")                       #required
current_app_name=$(jq -r '.params.current_app_name // ""' <"$payload") #required

manifest_file_location=$(jq -r '.params.manifest // ""' <"$payload") #required
manifest=/tmp/build/put/$manifest_file_location

path_file=$(jq -r '.params.path // ""' <"$payload") #required to be in either the params OR read from the manifest
if [[ -n ${path_file+x} ]]; then
  path=/tmp/build/put/$path_file
else
  path=$(yq read "$manifest" "applications.name==$current_app_name.path")
fi

##exit if the path wasn't set from the pipeline nor the manifest
if [[ $path == "" ]]; then
  printf "${BRed}Path must be specified in the pipeline or in the manifest.${NC}\n" >&2
  exit 1
fi

###

##############################################################
#get and set manifest variables
manifest_env_variables_json=$(jq -r '.params.manifest_env_variables // ""' <"$payload")
if [[ ! -z ${manifest_env_variables_json+x} ]]; then #append these variables to the manifest yml file under env:

  get_keys() {
    echo "$manifest_env_variables_json" | jq -r 'keys[]'
  }

  get_value() {
    local key=${1:?key null or not set}
    echo "$manifest_env_variables_json" | jq -r --arg key "$key" '.[$key]'
  }

  has_app_name() {
    [ -n "$current_app_name" ] && [ -n "$(yq read "$manifest" "applications.name==$current_app_name")" ]
  }

  has_one_app() {
    [ "1" == "$(yq read "$manifest" "applications" -l)" ]
  }

  for key in $(get_keys); do
    if has_app_name; then
      yq write -i "$manifest" -- "applications(name==$current_app_name).env.$key" "$(get_value "$key")"
    elif has_one_app; then
      yq write -i "$manifest" -- "applications[0].env.$key" "$(get_value "$key")"
    else
      yq write -i "$manifest" -- "env.$key" "$(get_value "$key")"
    fi
  done

fi

##############################################################

smoketest_file=$(jq -r '.params.smoketest // ""' <"$payload") #optional
# if [[ ! -n ${smoketest_file+x} ]]; then
if [[ ! -z ${smoketest_file+x} ]] && [[ ! $smoketest_file == "" ]]; then

  smoketest=/tmp/build/put/$smoketest_file >&2
  ## load in params, if any
  smoketest_vars_json=$(jq -r '.params.smoketest_variables // ""' <"$payload")
  if [[ ! -z ${smoketest_vars_json+x} ]]; then #set all those as variables
    smoketest_vars=$(echo $smoketest_vars_json | jq -r ' to_entries |  .[] | .key + "=\"" + .value + "\""')
    for key in ${smoketest_vars}; do
      eval ${key} >&2
    done
  fi
fi

keep_old_app=$(jq -r '.params.keep_old_app // ""' <"$payload") #optional

#from the resource
api=$(jq -r '.source.api // ""' <"$payload")
username=$(jq -r '.source.username // ""' <"$payload")
password=$(jq -r '.source.password // ""' <"$payload")
##If this is set, use this as an environmental variable https://cli.cloudfoundry.org/en-US/v6/  https://cli.cloudfoundry.org/en-US/v7/
cf_dial_timeout=$(jq -r '.source.cf_dial_timeout // ""' <"$payload") && [ -n "$cf_dial_timeout" ] && export CF_DIAL_TIMEOUT=$cf_dial_timeout

#expanding to add cf7 support.
# cf create-route
#   CF6:
#     cf create-route SPACE DOMAIN [--hostname HOSTNAME] [--path PATH]
#   CF7:
#     cf create-route DOMAIN [--hostname HOSTNAME] [--path PATH]
cf_version=$(jq -r '.source.cf_version // ""' <"$payload")

skip_cert_check=$(jq -r '.source.skip_cert_check // ""' <"$payload")
if [[ -n "$skip_cert_check" ]] && [[ $skip_cert_check==true ]]; then
  skipssl=" --skip-ssl-validation"
else
  skipssl=""
fi

printf "${BBlue}logging in${NC}\n" >&2
cf login -a "$api" -u "$username" -p "$password" $skipssl
printf "${BGreen}Successful.${NC}\n" >&2

#IF create_new is true...
#Check if the org and space exist... create it if it doesn't.
create_new=$(jq -r '.params.create_new // ""' <"$payload") #Optional
if [[ -n "$create_new" ]] && [[ $create_new==true ]]; then

  #check if org exists - create it if it does not.
  if [[ ! $(cf orgs | grep -P "(^|\s)\K${org}(?=\s|$)") == "" ]]; then
    printf "${BGreen}Org exists, setting target.${NC}\n" >&2
    cf target -o $org
    printf "${BGreen}Successful.${NC}\n" >&2
  else
    printf "${BYellow}Org does not exist. Creating org..${NC}\n" >&2
    cf create-org $org
    printf "${BGreen}Successful.${NC}\n" >&2
    printf "${BBlue}Now setting target.${NC}\n" >&2
    cf target -o $org
    printf "${BGreen}Successful.${NC}\n" >&2
  fi

  ##do the same for space.
  if [[ ! $(cf spaces | grep -P "(^|\s)\K${space}(?=\s|$)") == "" ]]; then
    printf "${BBlue}Space exists, setting target.${NC}\n" >&2
    cf target -s $space
    printf "${BGreen}Successful.${NC}\n" >&2
  else
    printf "${BYellow}Space does not exist. Creating space.${NC}\n" >&2
    cf create-space $space -o $org
    printf "${BGreen}Successful.${NC}\n" >&2
    printf "${BBlue}Now setting target.${NC}\n" >&2
    cf target -s $space
    printf "${BGreen}Successful.${NC}\n" >&2
  fi

else

  #don't bother checking -- just go ahead and set the target.
  #If it doesn't exist, it will error and it will be up to the
  #user to add the org and space manually.

  printf "${BBlue}Setting target${NC}\n" >&2
  cf target -o $org -s $space
  printf "${BGreen}Successful.${NC}\n" >&2

fi

##check that the app passed in legit
if [[ ! $(cf apps | grep -P "(^|\s)\K${current_app_name}(?=\s|$)") == "" ]]; then
  printf "${BBlue}$current_app_name found. Proceeding with Blue Green Deployment${NC}\n" >&2
else
  ########## new app with new route ###########
  printf "${BRed}$current_app_name not found.${NC}\n" >&2
  printf "${BYellow}$current_app_name will be deployed.${NC}\n" >&2

  ##Pull route from the manifest.
  if [ $(yq read "$manifest" "applications.name==$current_app_name.routes" -l) == 1 ]; then
    manifest_route=$(yq read "$manifest" "applications.name==$current_app_name.routes[0].route")
  else
    printf "${BRed}This concourse resource_type can only handle one route as provided by the manifest.${NC}\n" >&2
    exit 1
  fi
  new_hostname="$(cut -d '.' -f 1 <<<"$manifest_route")"
  new_domain="$(cut -d '.' -f 2- <<<"$manifest_route")"

  printf "${BBlue}Creating new route of $manifest_route...${NC}\n" >&2

  if [[ $cf_version == "7" ]]; then
    cf create-route $new_domain --hostname $new_hostname
  else
    cf create-route $space $new_domain --hostname $new_hostname
  fi

  printf "${BGreen}Successful.${NC}\n" >&2

  printf "${BBlue}Pushing new app $current_app_name with no route.${NC}\n" >&2

  cf push $current_app_name -f $manifest -p $path --no-route

  printf "${BGreen}Successful.${NC}\n" >&2

  #map green app to green route
  printf "${BBlue}Mapping app $current_app_name to $manifest_route${NC}\n" >&2
  cf map-route $current_app_name $new_domain -n $new_hostname
  printf "${BGreen}Successful.${NC}\n" >&2

  ##cleaning up from other deploys, if applicable.
  #This was added due to dial tcp: i/o timeout Issue

  if [[ ! $(cf apps | grep -P "(^|\s)\Kblue-${current_app_name}(?=\s|$)") == "" ]]; then
    printf "${BBlue}Performing cleanup from other unsuccessful blue-green deploys: removing old blue app & blue route (if applicable).${NC}\n" >&2
    cf delete blue-$current_app_name -f
    cf delete-route $new_domain -n blue-$new_hostname -f
  fi
  if [[ ! $(cf apps | grep -P "(^|\s)\Kgreen-${current_app_name}(?=\s|$)") == "" ]]; then
    printf "${BBlue}Performing cleanup from other unsuccessful blue-green deploys: removing old green app & green route (if applicable).${NC}\n" >&2
    cf delete green-$current_app_name -f
    cf delete-route $new_domain -n green-$new_hostname -f
  fi

  printf "${BGreen}Fresh deploy of $current_app_name completed.${NC}\n" >&2

  ######################################################################################
  ######################################SMOKE TEST######################################
  ######################################################################################

  if [[ ! -z ${smoketest+x} ]] && [[ ! $smoketest == "" ]]; then

    printf "${BYellow}Beginning smoketest: $smoketest_file${NC}\n" >&2

    #setting smoketest url for green app
    SMOKETEST_URL="https://$new_hostname.$new_domain"

    chmod +x $smoketest        #set the script to executable
    TEST=$(source $smoketest)  #runs the test
    STATUS=$?                  #gets the exit code/last executed cmd from the test
    if [ $STATUS -eq 0 ]; then # report back on smoketest
      printf "${BGreen}Smoketest successfully passed!${NC}\n" >&2
    else
      printf "${BRed}Smoketest failed!${NC}\n" >&2
      printf "${BRed}Running cleanup...${NC}\n" >&2
      exit 1
    fi
  else
    printf "${BYellow}Smoketest script not specified in pipeline.${NC}\n" >&2
    printf "${BBlue}Smoketesting skipped.${NC}\n" >&2

  fi

  ######################################################################################
  ######################################################################################
  ######################################################################################

  printf "${BGreen}==========================${NC}\n" >&2
  printf "${BGreen}Show data of deployed app:${NC}\n" >&2
  printf "${BGreen}==========================${NC}\n" >&2
  cf app $current_app_name >&2
  printf "${BGreen}==========================${NC}\n" >&2
  printf "${BGreen}Initial Deploy Successful.${NC}\n" >&2
  printf "${BGreen}==========================${NC}\n" >&2

  ##done
  jq -n \
    --arg timestamp $(date +%s) \
    '{
      version: {
        timestamp: $timestamp
      }
    }' >&3
  exit 0
#######################################
fi

## rename current_app_name to blue
blue_app_name="blue-$current_app_name"

#check if blue exists, delete it if so.. then continue
if [[ ! $(cf apps | grep -P "(^|\s)\K${blue_app_name}(?=\s|$)") == "" ]]; then
  printf "${BBlue}Older $blue_app_name found. Removing this app before continuing.${NC}\n" >&2
  cf delete $blue_app_name -f
  printf "${BGreen}Successful.${NC}\n" >&2
fi

printf "${BBlue}Renaming $current_app_name to $blue_app_name ${NC}\n" >&2
cf rename "$current_app_name" "$blue_app_name"
printf "${BGreen}Successful.${NC}\n" >&2

##set up a few variables
green_app_name="green-$current_app_name"

## Use route currently in use.
original_route=$(cf app $blue_app_name | grep routes | awk '{print $2}')
original_hostname="$(cut -d '.' -f 1 <<<"$original_route")"
original_domain="$(cut -d '.' -f 2- <<<"$original_route")"

#new temporary green hosthame:
green_hostname=green-$original_hostname

#new temporary route:
green_route_path=$green_hostname.$original_domain

printf "${BBlue}Creating new temporary route of $green_route_path...${NC}\n" >&2

if [[ $cf_version == "7" ]]; then
  cf create-route $original_domain --hostname $green_hostname
else
  cf create-route $space $original_domain --hostname $green_hostname
fi

printf "${BGreen}Successful.${NC}\n" >&2

#check if green exists, delete it if so.. then continue
if [[ ! $(cf apps | grep -P "(^|\s)\K${green_app_name}(?=\s|$)") == "" ]]; then
  printf "${BBlue}Older $green_app_name found. Removing this app before continuing.${NC}\n" >&2
  cf delete $green_app_name -f
  printf "${BGreen}Successful.${NC}\n" >&2
fi

printf "${BBlue}Pushing new green app $green_app_name with no route.${NC}\n" >&2

cf push $green_app_name -f $manifest -p $path --no-route

printf "${BGreen}Successful.${NC}\n" >&2

#map green app to green route
printf "${BBlue}Mapping green app $green_app_name to $green_route_path${NC}\n" >&2
cf map-route $green_app_name $original_domain -n $green_hostname
printf "${BGreen}Successful.${NC}\n" >&2

######################################SMOKE TEST######################################

if [[ ! -z ${smoketest+x} ]] && [[ ! $smoketest == "" ]]; then

  printf "${BYellow}Beginning smoketest: $smoketest_file${NC}\n" >&2

  #setting smoketest url for green app
  SMOKETEST_URL="https://$green_hostname.$original_domain"

  chmod +x $smoketest        #set the script to executable
  TEST=$(source $smoketest)  #runs the test
  STATUS=$?                  #gets the exit code/last executed cmd from the test
  if [ $STATUS -eq 0 ]; then # report back on smoketest
    printf "${BGreen}Smoketest successfully passed!${NC}\n" >&2
  else
    printf "${BRed}Smoketest failed!${NC}\n" >&2
    printf "${BRed}Running cleanup...${NC}\n" >&2

    # . Rename blue app to the original app name
    printf "${BBlue}Renaming blue app to the original app name${NC}\n" >&2
    cf rename $blue_app_name $current_app_name
    printf "${BGreen}Successful.${NC}\n" >&2

    # . delete the unused green route
    printf "${BBlue}Delete green route${NC}\n" >&2
    cf delete-route $original_domain -n $green_hostname -f
    printf "${BGreen}Successful.${NC}\n" >&2

    #. Delete green
    printf "${BBlue}Deleting app $green_app_name${NC}\n" >&2
    cf delete $green_app_name -f
    printf "${BGreen}Successful.${NC}\n" >&2

    exit 1
  fi
else
  printf "${BYellow}Smoketest script not specified in pipeline.${NC}\n" >&2
  printf "${BBlue}Smoketesting skipped.${NC}\n" >&2

fi

######################################################################################

# . Map route from incoming manifest to green
printf "${BBlue}Mapping original route to green app${NC}\n" >&2
cf map-route $green_app_name $original_domain -n $original_hostname
printf "${BGreen}Successful.${NC}\n" >&2

# . Unmap route to blue
printf "${BBlue}Unmapping route to blue${NC}\n" >&2
cf unmap-route $blue_app_name $original_domain -n $original_hostname
printf "${BGreen}Successful.${NC}\n" >&2

# . Unmap temporary route to green
printf "${BBlue}Unmapping temporary route to green${NC}\n" >&2
cf unmap-route $green_app_name $original_domain -n $green_hostname
printf "${BGreen}Successful.${NC}\n" >&2

# . delete the unused green route
printf "${BBlue}Delete unused green route${NC}\n" >&2
cf delete-route $original_domain -n $green_hostname -f
printf "${BGreen}Successful.${NC}\n" >&2

# . Rename green app to the original app name
printf "${BBlue}Renaming green app to the original app name${NC}\n" >&2
cf rename $green_app_name $current_app_name
printf "${BGreen}Successful.${NC}\n" >&2

#######If keep old app is true...

if [[ -n "$keep_old_app" ]] && [[ $keep_old_app==true ]]; then
  #rename blue
  printf "${BBlue}Renaming app $blue_app_name to $current_app_name-old${NC}\n" >&2
  if [[ ! $(cf apps | grep -P "(^|\s)\K${current_app_name}-old(?=\s|$)") == "" ]]; then
    printf "${BBlue}Previous old app being removed...${NC}\n" >&2
    cf delete $current_app_name-old -f
  fi
  cf rename $blue_app_name $current_app_name-old
  printf "${BGreen}Successful.${NC}\n" >&2
else
  #delete blue
  printf "${BBlue}Deleting old app $blue_app_name${NC}\n" >&2
  cf delete $blue_app_name -f
  printf "${BGreen}Successful.${NC}\n" >&2
fi

printf "${BBlue}==========================${NC}\n" >&2
printf "${BBlue}Show data of deployed app:${NC}\n" >&2
printf "${BBlue}==========================${NC}\n" >&2
cf app $current_app_name >&2
printf "${BGreen}=============================${NC}\n" >&2
printf "${BGreen}Blue-Green Deploy Successful.${NC}\n" >&2
printf "${BGreen}=============================${NC}\n" >&2

##done
jq -n \
  --arg timestamp $(date +%s) \
  '{
  version: {
    timestamp: $timestamp
  }
}' >&3
