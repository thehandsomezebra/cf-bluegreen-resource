#!/bin/bash

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source=$1
if [[ -z "$source" ]]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi
# for jq
PATH=/usr/local/bin:$PATH
export TMPDIR=${TMPDIR:-/tmp/bluegreen}
mkdir -p "${TMPDIR}"
payload=$(mktemp "$TMPDIR/resource-request.XXXXXX")
cat > "$payload" <&0

org=$(jq -r '.params.org // ""' < "$payload")
space=$(jq -r '.params.space // ""' < "$payload")

api=$(jq -r '.source.api // ""' < "$payload")
username=$(jq -r '.source.username // ""' < "$payload")
password=$(jq -r '.source.password // ""' < "$payload")

skip_cert_check=$(jq -r '.source.skip_cert_check // ""' < "$payload")
if [$skip_cert_check==true]
    then
    skipssl=" --skip-ssl-validation"
    else
    skipssl=""
fi

## test in the hijacked container
## cd /tmp/bluegreen | ls
##cat resource-request.RANDOMWHATEVER | jq -r '.source.username // ""'

echo "setting api"  >&2
 cf api "$api"
 echo "success" >&2
echo "logging in"  >&2
 cf login -u "$username" -p "$password" "$skipssl"

 echo "success" >&2

echo "setting target"  >&2

cf target -o $org -s $space

 echo "success" >&2


echo "checking cf apps"  >&2
echo cf apps >&2

jq -n \
--arg timestamp $(date +%s) \
'{
  version: {
    timestamp: $timestamp
  }
}' >&3