#!/bin/bash

set -eu
set -o pipefail

base_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

source "$base_dir/itest/lib/assert.sh"
source "$base_dir/itest/lib/helpers.sh"
source "$base_dir/itest/lib/config.sh"

it_can_create_a_user_provided_service_with_credentials_string() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local service_instance=${3:?service_instance null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg service_instance "$service_instance" \
  --arg credentials '{"username":"admin","password":"pa55woRD"}' \
  '{
    command: "create-user-provided-service",
    org: $org,
    space: $space,
    service_instance: $service_instance,
    credentials: $credentials
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::service_exists "$service_instance"
}

it_can_create_a_user_provided_service_with_credentials_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local service_instance=${3:?service_instance null or not set}

  local project=$(create_credentials_file)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg service_instance "$service_instance" \
  --arg credentials "$project/credentials.json" \
  '{
    command: "create-user-provided-service",
    org: $org,
    space: $space,
    service_instance: $service_instance,
    credentials: $credentials
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::service_exists "$service_instance"
}

it_can_create_a_user_provided_service_with_syslog() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local service_instance=${3:?service_instance null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg service_instance "$service_instance" \
  --arg syslog_drain_url "syslog://example.com" \
  '{
    command: "create-user-provided-service",
    org: $org,
    space: $space,
    service_instance: $service_instance,
    syslog_drain_url: $syslog_drain_url
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::service_exists "$service_instance"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
app_name=$(generate_test_name_with_spaces "App")

credentials_string_si=$(generate_test_name_with_spaces "cups credentials string")
credentials_file_si=$(generate_test_name_with_spaces "cups credentials file")
syslog_si=$(generate_test_name_with_spaces "cups syslog")
route_si=$(generate_test_name_with_spaces "cups route")
route_service_url="https://example.com"

login

setup_integration_tests "$org" "$space"

cf::target "$org" "$space"

run it_can_push_an_app \"$org\" \"$space\" \"$app_name\"

# run first to create the ups, then again to update the ups
run it_can_create_a_user_provided_service_with_credentials_string \"$org\" \"$space\" \"$credentials_string_si\"
run it_can_create_a_user_provided_service_with_credentials_string \"$org\" \"$space\" \"$credentials_string_si\"

run it_can_create_a_user_provided_service_with_credentials_file \"$org\" \"$space\" \"$credentials_file_si\"
run it_can_create_a_user_provided_service_with_credentials_file \"$org\" \"$space\" \"$credentials_file_si\"

run it_can_create_a_user_provided_service_with_syslog \"$org\" \"$space\" \"$syslog_si\"
run it_can_create_a_user_provided_service_with_syslog \"$org\" \"$space\" \"$syslog_si\"

run it_can_create_a_user_provided_service_with_route \"$org\" \"$space\" \"$route_si\" \"$route_service_url\"
run it_can_create_a_user_provided_service_with_route \"$org\" \"$space\" \"$route_si\" \"$route_service_url\"

run it_can_bind_a_service \"$org\" \"$space\" \"$app_name\" \"$credentials_string_si\"
run it_can_bind_a_service \"$org\" \"$space\" \"$app_name\" \"$credentials_file_si\"
run it_can_bind_a_service \"$org\" \"$space\" \"$app_name\" \"$syslog_si\"
run it_can_bind_a_service \"$org\" \"$space\" \"$app_name\" \"$route_si\"

run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
