#!/bin/bash

set -eu
set -o pipefail

base_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

source "$base_dir/itest/lib/assert.sh"
source "$base_dir/itest/lib/helpers.sh"
source "$base_dir/itest/lib/config.sh"
source "$base_dir/resource/lib/error-codes.sh"

it_can_error_if_params_not_set() {
  local config=$(jq -n '{ source: {} }')

  set +e
  put_with_config "$config"
  assert::equals "$E_PARAMS_NOT_SET" "$?"
  set -e
}

it_can_error_if_api_not_set() {
  local config=$(jq -n '{ source: {}, params: {} }')

  set +e
  put_with_config "$config"
  assert::equals "$E_API_NOT_SET" "$?"
  set -e
}

it_can_error_if_neither_username_or_client_id_are_set() {
  local config=$(jq -n '{
      source: { api: "https://api.run.example.com" },
      params: {}
    }')

  set +e
  put_with_config "$config"
  assert::equals "$E_NEITHER_USERNAME_OR_CLIENT_ID_SET" "$?"
  set -e
}

it_can_error_if_both_username_and_client_id_are_set() {
  local config=$(jq -n '{
      source: {
        api: "https://api.run.example.com",
        username: "some_user",
        client_id: "some_client_id"
      },
      params: {}
    }')

  set +e
  put_with_config "$config"
  assert::equals "$E_BOTH_USERNAME_AND_CLIENT_ID_SET" "$?"
  set -e
}

it_can_error_if_password_not_set() {
  local config=$(jq -n '{
      source: {
        api: "https://api.run.example.com",
        username: "some_user"
      },
      params: {}
    }')

  set +e
  put_with_config "$config"
  assert::equals "$E_PASSWORD_NOT_SET" "$?"
  set -e
}

it_can_error_if_client_secret_not_set() {
  local config=$(jq -n '{
      source: {
        api: "https://api.run.example.com",
        client_id: "some_client_id"
      },
      params: {}
    }')

  set +e
  put_with_config "$config"
  assert::equals "$E_CLIENT_SECRET_NOT_SET" "$?"
  set -e
}

it_can_error_if_command_not_set() {
  local config=$(echo $CCR_SOURCE | jq '.params = {}')

  set +e
  put_with_config "$config"
  assert::equals "$E_COMMAND_NOT_SET" "$?"
  set -e
}

it_can_error_if_command_file_not_found() {
  local config=$(echo $CCR_SOURCE | jq '.params = {
      command_file: "does_not_exist.yml"
    }')

  set +e
  put_with_config "$config"
  assert::equals "$E_COMMAND_FILE_NOT_FOUND" "$?"
  set -e
}

it_can_error_if_zero_downtime_push_manifest_not_found() {
  local config=$(echo $CCR_SOURCE | jq '.params = {
      command: "zero-downtime-push",
      manifest: "does_not_exist.yml"
    }')

  set +e
  put_with_config "$config"
  assert::equals "$E_MANIFEST_FILE_NOT_FOUND" "$?"
  set -e
}

it_can_error_if_unknown_command_set() {
  local config=$(echo $CCR_SOURCE | jq '.params = {
      command: "does-not-exist"
    }')

  set +e
  put_with_config "$config"
  assert::equals "$E_UNKNOWN_COMMAND" "$?"
  set -e
}

get_path_without_cf_binaries() {
  cd $(mktemp -d $TMPDIR/usr_local_bin.XXXXXX)
  ln -s /usr/local/bin/jq "$PWD/jq"
  ln -s /usr/local/bin/yq "$PWD/yq"
  echo "/bin:/usr/bin:$PWD"
}

it_can_error_if_default_cf_cli_binary_not_found() {
  local config=$(echo $CCR_SOURCE | jq '.params = {
      command: "does-not-exist"
    }')

  PATH=$(get_path_without_cf_binaries)

  set +e
  put_with_config "$config"
  assert::equals "$E_CF_CLI_BINARY_NOT_FOUND" "$?"
  set -e
}

it_can_error_if_cf6_cli_binary_not_found() {
  local config=$(echo $CCR_SOURCE | jq \
    '
      .source.cf_cli_version = 6
      |
      .params = { command: "does-not-exist" }
    ')

  PATH=$(get_path_without_cf_binaries)

  set +e
  put_with_config "$config"
  assert::equals "$E_CF_CLI_BINARY_NOT_FOUND" "$?"
  set -e
}

it_can_error_if_cf7_cli_binary_not_found() {
  local config=$(echo $CCR_SOURCE | jq \
    '
      .source.cf_cli_version = 7
      |
      .params = { command: "does-not-exist" }
    ')

  PATH=$(get_path_without_cf_binaries)

  set +e
  put_with_config "$config"
  assert::equals "$E_CF_CLI_BINARY_NOT_FOUND" "$?"
  set -e
}

it_can_error_if_unsupported_cf_cli_version_specified() {
  local config=$(echo $CCR_SOURCE | jq \
    '
      .source.cf_cli_version = 0
      |
      .params = { command: "does-not-exist" }
    ')

  set +e
  put_with_config "$config"
  assert::equals "$E_UNSUPPORTED_CF_CLI_VERSION" "$?"
  set -e
}

run it_can_error_if_params_not_set
run it_can_error_if_api_not_set
run it_can_error_if_neither_username_or_client_id_are_set
run it_can_error_if_both_username_and_client_id_are_set
run it_can_error_if_password_not_set
run it_can_error_if_client_secret_not_set
run it_can_error_if_command_not_set
run it_can_error_if_command_file_not_found
run it_can_error_if_zero_downtime_push_manifest_not_found
run it_can_error_if_unknown_command_set
run it_can_error_if_default_cf_cli_binary_not_found
run it_can_error_if_cf6_cli_binary_not_found
run it_can_error_if_cf7_cli_binary_not_found
run it_can_error_if_unsupported_cf_cli_version_specified
