#!/bin/bash

set -eu
set -o pipefail

base_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

source "$base_dir/itest/lib/assert.sh"
source "$base_dir/itest/lib/helpers.sh"
source "$base_dir/itest/lib/config.sh"

it_can_push_an_app_no_start() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local project=$(create_static_app "$app_name")

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg path "$project/content" \
  --arg manifest "$project/manifest.yml" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: $path,
    manifest: $manifest,
    no_start: "true"
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::is_app_stopped "$app_name"
}

it_can_rename_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}
  local new_app_name=${4:?new_app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg new_app_name "$new_app_name" \
  '{
    command: "rename",
    org: $org,
    space: $space,
    app_name: $app_name,
    new_app_name: $new_app_name
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf::app_exists "$app_name"
  assert::success cf::app_exists "$new_app_name"
}

it_can_start_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "start",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::is_app_started "$app_name"
}

it_can_stop_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "stop",
    org: $org,
    space: $space,
    app_name: $app_name
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::is_app_stopped "$app_name"
}

it_can_scale_an_app_instances() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg instances "2" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    instances: $instances
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::equals 2 "$(cf::get_app_instances "$app_name")"
}

it_can_scale_an_app_disk_quota() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg disk_quota "512M" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    disk_quota: $disk_quota
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::equals 512 "$(cf::get_app_disk_quota "$app_name")"
}

it_can_scale_an_app_memory() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg memory "512M" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    memory: $memory
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::equals 512 "$(cf::get_app_memory "$app_name")"
}

it_can_scale_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg instances "1" \
  --arg disk_quota "1G" \
  --arg memory "1G" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    instances: $instances,
    disk_quota: $disk_quota,
    memory: $memory
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::equals 1 "$(cf::get_app_instances "$app_name")"
  assert::equals 1024 "$(cf::get_app_disk_quota "$app_name")"
  assert::equals 1024 "$(cf::get_app_memory "$app_name")"
}

it_can_set_environment_variables() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local key1="some_key1"
  local value1="some_value1"
  local key2="some_key2"
  local value2="some_value2"

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg key1 "$key1" \
  --arg value1 "$value1" \
  --arg key2 "$key2" \
  --arg value2 "$value2" \
  '{
    command: "set-env",
    org: $org,
    space: $space,
    app_name: $app_name,
    environment_variables: {
      ($key1): $value1,
      ($key2): $value2
    }
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::has_env "$app_name" "$key1" "$value1"
  assert::success cf::has_env "$app_name" "$key2" "$value2"
}

it_can_set_an_environment_variable_using_deprecated_params() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local env_var_name=JBP_CONFIG_OPEN_JDK_JRE
  local env_var_value='{ jre: { version: 11.+ }, memory_calculator: { stack_threads: 25 } }'

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg env_var_name "$env_var_name" \
  --arg env_var_value "$env_var_value" \
  '{
    command: "set-env",
    org: $org,
    space: $space,
    app_name: $app_name,
    env_var_name: $env_var_name,
    env_var_value: $env_var_value
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::has_env "$app_name" "$env_var_name" "$env_var_value"
}

it_can_restart_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "restart",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::is_app_started "$app_name"
}

it_can_restage_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "restage",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::is_app_started "$app_name"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")

login

setup_integration_tests "$org" "$space"

cf::target "$org" "$space"

describe "push an app then start, restart, restage, and stop it"
{
  app_name=$(generate_test_name_with_spaces "App")

  run it_can_push_an_app_no_start \"$org\" \"$space\" \"$app_name\"
  run it_can_start_an_app \"$org\" \"$space\" \"$app_name\"
  run it_can_restart_an_app \"$org\" \"$space\" \"$app_name\"
  run it_can_restage_an_app \"$org\" \"$space\" \"$app_name\"
  run it_can_stop_an_app \"$org\" \"$space\" \"$app_name\"
  run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"
}

describe "push an app and rename it"
{
  app_name=$(generate_test_name_with_spaces "App")
  renamed_app_name=$(generate_test_name_with_spaces "Renamed App")

  run it_can_push_an_app \"$org\" \"$space\" \"$app_name\"
  run it_can_rename_an_app \"$org\" \"$space\" \"$app_name\" \"$renamed_app_name\"
  run it_can_delete_an_app \"$org\" \"$space\" \"$renamed_app_name\"
}

describe "push an app, scale it, set environment variables"
{
  app_name=$(generate_test_name_with_spaces "App")

  run it_can_push_an_app \"$org\" \"$space\" \"$app_name\"

  run it_can_scale_an_app_instances \"$org\" \"$space\" \"$app_name\"
  run it_can_scale_an_app_disk_quota \"$org\" \"$space\" \"$app_name\"
  run it_can_scale_an_app_memory \"$org\" \"$space\" \"$app_name\"
  run it_can_scale_an_app \"$org\" \"$space\" \"$app_name\"

  run it_can_set_environment_variables \"$org\" \"$space\" \"$app_name\"
  run it_can_set_an_environment_variable_using_deprecated_params \"$org\" \"$space\" \"$app_name\"

  run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"
}

teardown_integration_tests "$org" "$space"
