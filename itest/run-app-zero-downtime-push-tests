#!/bin/bash

set -eu
set -o pipefail

base_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

source "$base_dir/itest/lib/assert.sh"
source "$base_dir/itest/lib/helpers.sh"
source "$base_dir/itest/lib/config.sh"

it_can_error_if_zero_downtime_push_manifest_not_found() {
  local config=$(echo $CCR_SOURCE | jq '.params = {
      command: "zero-downtime-push",
      manifest: "does_not_exist.yml"
    }')

  set +e
  put_with_config "$config"
  assert::equals "$E_MANIFEST_FILE_NOT_FOUND" "$?"
  set -e
}

it_can_simple_push_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local current_app_name=${3:?current_app_name null or not set}

  local project=$(create_static_app "$current_app_name")

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg manifest "$project/manifest.yml" \
  '{
    command: "zero-downtime-push",
    org: $org,
    space: $space,
    manifest: $manifest
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::is_app_started "$current_app_name"
}

it_can_zero_downtime_push_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local current_app_name=${3:?current_app_name null or not set}

  local project=$(create_static_app_with_vars "$current_app_name")

  # Remove path from manifest so we can test explicitly setting on the command
  yq delete -i "$project/manifest.yml" 'applications[0].path'

  # Add an environment variable to the manifest so we can test that it's still there when we add more env vars in the command
  yq write -i "$project/manifest.yml" -- "applications[0].env.EXISTING_ENV" "some_value"

  # test that these yaml structures are being treated as strings when added to the manifest.yml and not being processed as yaml by yq
  local yaml_scalar="- some string that starts with a hyphen which could potentially break yq"
  local yaml_multiline_scalar="some
multi line
string"
  local yaml_map="{ jre: { version: 11.+ }, memory_calculator: { stack_threads: 25 } }"
  local yaml_sequence="[ some, list, of, things ]"

  local stack="cflinuxfs3"

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg manifest "$project/manifest.yml" \
  --arg current_app_name "$current_app_name" \
  --arg path "$project/content" \
  --arg yaml_scalar "$yaml_scalar" \
  --arg yaml_multiline_scalar "$yaml_multiline_scalar" \
  --arg yaml_map "$yaml_map" \
  --arg yaml_sequence "$yaml_sequence" \
  --arg vars_file1 "$project/vars-file1.yml" \
  --arg stack "$stack" \
  '{
    command: "zero-downtime-push",
    org: $org,
    space: $space,
    manifest: $manifest,
    current_app_name: $current_app_name,
    path: $path,
    environment_variables: {
      yaml_scalar: $yaml_scalar,
      yaml_multiline_scalar: $yaml_multiline_scalar,
      yaml_map: $yaml_map,
      yaml_sequence: $yaml_sequence
    },
    vars: {
      instances: 2,
    },
    vars_files: [ $vars_file1 ],
    stack: $stack
  }')

  describe "Simple push an app (first push)"
  {
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

    assert::success cf::is_app_started "$current_app_name"
    local current_app_guid=$(cf::get_app_guid "$current_app_name")

    assert::success cf::has_env "$current_app_name" "EXISTING_ENV" "some_value"
    assert::success cf::has_env "$current_app_name" "yaml_scalar" "$yaml_scalar"
    assert::success cf::has_env "$current_app_name" "yaml_multiline_scalar" "$yaml_multiline_scalar"
    assert::success cf::has_env "$current_app_name" "yaml_map" "$yaml_map"
    assert::success cf::has_env "$current_app_name" "yaml_sequence" "$yaml_sequence"

    assert::equals 2 "$(cf::get_app_instances "$app_name")"
    assert::equals 64 "$(cf::get_app_memory "$app_name")"

    assert::equals "$stack" "$(cf::get_app_stack "$app_name")"
  }

  describe "Zero downtime push an app"
  {
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

    assert::failure cf::app_exists "$current_app_name-venerable"

    assert::success cf::is_app_started "$current_app_name"
    local new_app_guid=$(cf::get_app_guid "$current_app_name")

    assert::not_equals "$current_app_guid" "$new_app_guid"

    assert::success cf::has_env "$current_app_name" "EXISTING_ENV" "some_value"
    assert::success cf::has_env "$current_app_name" "yaml_scalar" "$yaml_scalar"
    assert::success cf::has_env "$current_app_name" "yaml_multiline_scalar" "$yaml_multiline_scalar"
    assert::success cf::has_env "$current_app_name" "yaml_map" "$yaml_map"
    assert::success cf::has_env "$current_app_name" "yaml_sequence" "$yaml_sequence"

    assert::equals 2 "$(cf::get_app_instances "$app_name")"
    assert::equals 64 "$(cf::get_app_memory "$app_name")"

    assert::equals "$stack" "$(cf::get_app_stack "$app_name")"
  }
}

it_can_zero_downtime_push_a_docker_image_from_a_private_registry() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local current_app_name=${3:?current_app_name null or not set}
  local docker_private_image=${4:?docker_private_image null or not set}
  local docker_private_username=${5:?docker_private_username null or not set}
  local docker_private_password=${6:?docker_private_password null or not set}

  local project=$(create_static_app "$current_app_name")

  # Remove path, buildpacks from manifest so we can push a docker image
  yq delete -i "$project/manifest.yml" 'applications[0].path'
  yq delete -i "$project/manifest.yml" 'applications[0].buildpacks'

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg manifest "$project/manifest.yml" \
  --arg current_app_name "$current_app_name" \
  --arg docker_image "$docker_private_image" \
  --arg docker_username "$docker_private_username" \
  --arg docker_password "$docker_private_password" \
  '{
    command: "zero-downtime-push",
    org: $org,
    space: $space,
    manifest: $manifest,
    current_app_name: $current_app_name,
    docker_image: $docker_image,
    docker_username: $docker_username,
    docker_password: $docker_password
  }')

  describe "Simple push an app (first push)"
  {
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

    assert::success cf::is_app_started "$current_app_name"
    local current_app_guid=$(cf::get_app_guid "$current_app_name")
  }

  describe "Zero downtime push an app"
  {
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

    assert::failure cf::app_exists "$current_app_name-venerable"

    assert::success cf::is_app_started "$current_app_name"
    local new_app_guid=$(cf::get_app_guid "$current_app_name")

    assert::not_equals "$current_app_guid" "$new_app_guid"
  }
}

it_can_zero_downtime_push_an_app_no_start() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local current_app_name=${3:?current_app_name null or not set}

  local project=$(create_static_app "$current_app_name")

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg manifest "$project/manifest.yml" \
  --arg current_app_name "$current_app_name" \
  '{
    command: "zero-downtime-push",
    org: $org,
    space: $space,
    manifest: $manifest,
    current_app_name: $current_app_name,
    no_start: true
  }')

  describe "Simple push an app (first push)"
  {
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

    assert::failure cf::is_app_started "$current_app_name"
    local current_app_guid=$(cf::get_app_guid "$current_app_name")
  }

  describe "Zero downtime push an app"
  {
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

    assert::failure cf::app_exists "$current_app_name-venerable"

    assert::failure cf::is_app_started "$current_app_name"
    local new_app_guid=$(cf::get_app_guid "$current_app_name")

    assert::not_equals "$current_app_guid" "$new_app_guid"
  }
}

it_can_rollback_a_failed_push() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local current_app_name=${3:?current_app_name null or not set}

  local project=$(create_static_app "$current_app_name")

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg manifest "$project/manifest.yml" \
  --arg current_app_name "$current_app_name" \
  '{
    command: "zero-downtime-push",
    org: $org,
    space: $space,
    manifest: $manifest,
    current_app_name: $current_app_name,
    show_app_log: true
  }')

  describe "Simple push an app (first push)"
  {
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

    assert::success cf::is_app_started "$current_app_name"
    local current_app_guid=$(cf::get_app_guid "$current_app_name")
  }

  describe "Rollback a failed push"
  {
    # force push failure by setting container disk space way too low
    yq write -i "$project/manifest.yml" "applications(name==$current_app_name).disk_quota" "1M"

    set +e
    put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'
    assert::equals "$E_ZERO_DOWNTIME_PUSH_FAILED" "$?"
    set -e

    local this_app_guid=$(cf::get_app_guid "$current_app_name")

    assert::equals "$current_app_guid" "$this_app_guid"
  }
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")

login

setup_integration_tests "$org" "$space"

cf::target "$org" "$space"

run it_can_error_if_zero_downtime_push_manifest_not_found

app_name=$(generate_test_name_with_spaces "App")
run it_can_simple_push_an_app \"$org\" \"$space\" \"$app_name\"
run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

app_name=$(generate_test_name_with_spaces "App")
run it_can_zero_downtime_push_an_app \"$org\" \"$space\" \"$app_name\"
run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

app_name=$(generate_test_name_with_spaces "App")
run it_can_zero_downtime_push_an_app_no_start \"$org\" \"$space\" \"$app_name\"
run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

app_name=$(generate_test_name_with_spaces "App")
docker_private_image=$CCR_DOCKER_PRIVATE_IMAGE
docker_private_username=$CCR_DOCKER_PRIVATE_USERNAME
docker_private_password=$CCR_DOCKER_PRIVATE_PASSWORD
run it_can_zero_downtime_push_a_docker_image_from_a_private_registry \"$org\" \"$space\" \"$app_name\" \"$docker_private_image\" \"$docker_private_username\" \"$docker_private_password\"
run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

app_name=$(generate_test_name_with_spaces "App")
run it_can_rollback_a_failed_push \"$org\" \"$space\" \"$app_name\"
run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
