#!/bin/bash

set -eu
set -o pipefail

base_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

source "$base_dir/itest/lib/assert.sh"
source "$base_dir/itest/lib/helpers.sh"
source "$base_dir/itest/lib/config.sh"

it_can_create_a_user_with_password() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local username=${3:?username null or not set}
  local password=${4:?password null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg username "$username" \
  --arg password "$password" \
  '{
    command: "create-user",
    org: $org,
    space: $space,
    username: $username,
    password: $password
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::user_exists "$username"
}

it_can_create_a_user_with_origin() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local username=${3:?username null or not set}
  local origin=${4:?origin null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg username "$username" \
  --arg origin "$origin" \
  '{
    command: "create-user",
    org: $org,
    space: $space,
    username: $username,
    origin: $origin
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::user_exists "$username" "$origin"
}

it_can_create_users_from_file() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}

  local project=$(create_users_file "$org" "$space")

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg file "$project/users.csv" \
  '{
    command: "create-users-from-file",
    org: $org,
    space: $space,
    file: $file
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::user_exists "$test_prefix-bulkload-user1"
  assert::success cf::user_exists "$test_prefix-bulkload-user2"
  assert::success cf::user_exists "$test_prefix-bulkload-user3"
}

it_can_delete_a_user_with_origin() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local username=${3:?username null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg username "$username" \
  '{
    command: "delete-user",
    org: $org,
    space: $space,
    username: $username
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf::user_exists "$username"
}

it_can_delete_a_user_with_password() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local username=${3:?username null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg username "$username" \
  '{
    command: "delete-user",
    org: $org,
    space: $space,
    username: $username
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf::user_exists "$username"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
username=$(generate_test_name_with_hyphens "User")
password=$(generate_test_name_with_spaces "Password")
origin_username=$(generate_test_name_with_hyphens "Origin User")

login

setup_integration_tests "$org" "$space"

cf::target "$org" "$space"

run it_can_create_a_user_with_password \"$org\" \"$space\" \"$username\" \"$password\"
run it_can_create_a_user_with_origin \"$org\" \"$space\" \"$origin_username\" "sso"
run it_can_create_users_from_file \"$org\" \"$space\"

run it_can_delete_a_user_with_origin \"$org\" \"$space\" \"$origin_username\"
run it_can_delete_a_user_with_password \"$org\" \"$space\" \"$username\"

teardown_integration_tests "$org" "$space"
