#!/bin/bash

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source=$1
if [[ -z "$source" ]]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi
# for jq
PATH=/usr/local/bin:$PATH
export TMPDIR=${TMPDIR:-/tmp/bluegreen}
mkdir -p "${TMPDIR}"
payload=$(mktemp "$TMPDIR/resource-request.XXXXXX")
cat > "$payload" <&0

#from the task
org=$(jq -r '.params.org // ""' < "$payload")
space=$(jq -r '.params.space // ""' < "$payload")
current_app_name=$(jq -r '.params.current_app_name // ""' < "$payload")
manifest_file=$(jq -r '.params.manifest // ""' < "$payload")
manifest=/tmp/build/put/$manifest_file
path_file=$(jq -r '.params.path // ""' < "$payload")
path=/tmp/build/put/$path_file
show_app_log=
no_start=$(jq -r '.params.no_start // ""' < "$payload")

#from the resource
api=$(jq -r '.source.api // ""' < "$payload")
username=$(jq -r '.source.username // ""' < "$payload")
password=$(jq -r '.source.password // ""' < "$payload")

skip_cert_check=$(jq -r '.source.skip_cert_check // ""' < "$payload")
if [$skip_cert_check==true]
    then
    skipssl=" --skip-ssl-validation"
    else
    skipssl=""
fi

## to test in the hijacked container:
    #.source. is from resource  
    #.params. is from task

## cd /tmp/bluegreen | ls
## cat resource-request.RANDOMWHATEVER | jq -r '.[]'
## cat resource-request.RANDOMWHATEVER | jq -r '.source.username // ""'

echo "setting api"  >&2
cf api "$api"
echo "success" >&2

echo "logging in"  >&2
cf login -u "$username" -p "$password" "$skipssl"
echo "success" >&2

echo "setting target"  >&2
cf target -o $org -s $space
echo "success" >&2

##check that the app passed in legit
# if [cf app $current_app_name 2>&1 ==1]  ##I gotta work on this - but for now, pass in legit app names
#     then
#         echo "App $current_app_name does not exist" >&2
#         exit 1
# fi

## rename current_app_name to blue
blue_app_name="blue-$current_app_name"
echo "Renaming $current_app_name to $blue_app_name"  >&2
cf rename "$current_app_name" "$blue_app_name"
echo "success" >&2

##set up variable for the new app name
green_app_name="green-$current_app_name"







# # . Generate random route
# # ** Need to write something for this, remembering the domain name cannot be more than 63 characters

###############
    ##get the domain from the input
#domain=$(get_option '.domain')
original_route=$(cf app $blue_app_name | grep routes | awk '{print $2}')
original_hostname="$(cut -d '.' -f 1 <<< "$original_route" )"
original_domain="$(cut -d '.' -f 2- <<< "$original_route" )"
## echo $original_route
## echo $original_hostname
## echo $original_domain

 #hostname=$(get_option '.hostname')
    ## new route will be $green_app_name.$original_domain
###############
# begin setting up args for new route

#new temporary green hosthame:
green_hostname=green-$original_hostname

#new temporary route:
green_route_path=$green_hostname.$original_domain

echo "Creating new temporary route of $green_route_path..."  >&2
# echo "original_route: $original_route"  >&2
# echo "original_domain: $original_domain"  >&2
cf create-route $space $original_domain --hostname $green_hostname
echo "success" >&2

#fly -t main-lab-ops hijack -j bluegreen-test-config-server-pipeline/deploy-sandbox

echo "Pushing new green app $green_app_name with no route."  >&2
cf push $green_app_name -f $manifest -p $path --no-route
echo "success" >&2

#map green app to green route
echo "Mapping green app $green_app_name to $green_route_path"  >&2
cf map-route $green_app_name $original_domain -n $green_hostname
echo "success" >&2

#if show_app_log then cf logs "$app_name" --recent
#cf logs "$green_app_name" --recent

# . Push green app with random route 
##cf push sets domain as default apps.internal, subdomain.example.com
## https://cli.cloudfoundry.org/en-US/v6/push.html



#https://cli.cloudfoundry.org/en-US/v6/push.html
#include the new random route in this push 


#execute smoke tests, if any
# . For each smoke test
# .. Execute passing in the random route as the first input (`$1`)
# .. Capture the result
# *** If `exit_code` is 0, continue
# *** Else
# **** If `clean_up` is `true`
# ***** Delete green
# ***** Rename blue by removing prefix `blue-`
# **** `exit 1`



#if success from smoke test (or no smoke tests offered)
echo "...Smoke tests would go here, if we did that...."  >&2

# . Map route from incoming manifest to green
echo "Mapping original route to green"  >&2
#cf map-route $green_app_name $original_domain -n $current_app_name
echo "success" >&2


# . Unmap route to blue
echo "Unmapping route to blue"  >&2
#cf unmap-route $blue_app_name $original_domain -n $current_app_name
echo "success" >&2

# . Unmap temporary route to green
echo "Unmapping temporary route to green"  >&2
#cf unmap-route $green_app_name $original_domain -n $green_app_name
echo "success" >&2

# . delete the unused green route
#cf delete-route $original_domain -n green-$original_hostname

# . Rename green app to the original app name
echo "Renaming green app to the original app name"  >&2
#cf rename $green_app_name $current_app_name
echo "success" >&2

##IF CLEANUP IS TRUE

#. Delete blue
echo "Deleting $blue_app_name"  >&2
#cf delete $blue_app_name
echo "success" >&2

# OR rename it, so it can be looked at later,
#cf rename $blue_app_name $current_app_name-old
















##done
jq -n \
--arg timestamp $(date +%s) \
'{
  version: {
    timestamp: $timestamp
  }
}' >&3