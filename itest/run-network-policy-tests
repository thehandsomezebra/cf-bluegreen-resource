#!/bin/bash

set -eu
set -o pipefail

base_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

source "$base_dir/itest/lib/assert.sh"
source "$base_dir/itest/lib/helpers.sh"
source "$base_dir/itest/lib/config.sh"

it_can_add_network_policy_with_defaults() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local source_app_name=${3:?source_app_name null or not set}
  local destination_app_name=${4:?destination_app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg source_app "$source_app_name" \
  --arg destination_app "$destination_app_name" \
  '{
    command: "add-network-policy",
    org: $org,
    space: $space,
    source_app: $source_app,
    destination_app: $destination_app,
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::network_policy_exists "$source_app_name" "$destination_app_name" "tcp" "8080"
}

it_can_add_network_policy_with_protocol_and_port() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local source_app_name=${3:?source_app_name null or not set}
  local destination_app_name=${4:?destination_app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg source_app "$source_app_name" \
  --arg destination_app "$destination_app_name" \
  '{
    command: "add-network-policy",
    org: $org,
    space: $space,
    source_app: $source_app,
    destination_app: $destination_app,
    protocol: "udp",
    port: "9999"
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::network_policy_exists "$source_app_name" "$destination_app_name" "udp" "9999"
}

it_can_add_network_policy_with_targeted_org_and_space() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local source_app_name=${3:?source_app_name null or not set}
  local destination_org=${4:?destination_org null or not set}
  local destination_space=${5:?destination_space null or not set}
  local destination_app_name=${6:?destination_app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg source_app "$source_app_name" \
  --arg destination_org "$destination_org" \
  --arg destination_space "$destination_space" \
  --arg destination_app "$destination_app_name" \
  '{
    command: "add-network-policy",
    org: $org,
    space: $space,
    source_app: $source_app,
    destination_org: $destination_org,
    destination_space: $destination_space,
    destination_app: $destination_app,
    protocol: "udp",
    port: "9999"
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::network_policy_exists "$source_app_name" "$destination_app_name" "udp" "9999"
}

it_can_remove_network_policy() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local source_app_name=${3:?source_app_name null or not set}
  local destination_app_name=${4:?destination_app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg source_app "$source_app_name" \
  --arg destination_app "$destination_app_name" \
  '{
    command: "remove-network-policy",
    org: $org,
    space: $space,
    source_app: $source_app,
    destination_app: $destination_app,
    protocol: "udp",
    port: "9999"
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf::network_policy_exists "$source_app_name" "$destination_app_name" "udp" "9999"
}

it_can_remove_network_policy_with_targeted_org_and_space() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local source_app_name=${3:?source_app_name null or not set}
  local destination_org=${4:?destination_org null or not set}
  local destination_space=${5:?destination_space null or not set}
  local destination_app_name=${6:?destination_app_name null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg source_app "$source_app_name" \
  --arg destination_org "$destination_org" \
  --arg destination_space "$destination_space" \
  --arg destination_app "$destination_app_name" \
  '{
    command: "remove-network-policy",
    org: $org,
    space: $space,
    source_app: $source_app,
    destination_org: $destination_org,
    destination_space: $destination_space,
    destination_app: $destination_app,
    protocol: "udp",
    port: "9999"
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf::network_policy_exists "$source_app_name" "$destination_app_name" "udp" "9999"
}

source_org=$(generate_test_name_with_spaces "Source Org")
source_space=$(generate_test_name_with_spaces "Source Space")
source_app_name=$(generate_test_name_with_spaces "Source App")

destination_org=$(generate_test_name_with_spaces "Destination Org")
destination_space=$(generate_test_name_with_spaces "Destination Space")
destination_app_name=$(generate_test_name_with_spaces "Destination App")

login

setup_integration_tests "$source_org" "$source_space"
setup_integration_tests "$destination_org" "$destination_space"

cf::target "$source_org" "$source_space"

describe "allow the source app to connect to the destination app in the same org and space"
{
  run it_can_push_an_app \"$source_org\" \"$source_space\" \"$source_app_name\"
  run it_can_push_an_app \"$source_org\" \"$source_space\" \"$destination_app_name\"

  run it_can_add_network_policy_with_defaults \"$source_org\" \"$source_space\" \"$source_app_name\" \"$destination_app_name\"
  run it_can_add_network_policy_with_protocol_and_port \"$source_org\" \"$source_space\" \"$source_app_name\" \"$destination_app_name\"

  run it_can_remove_network_policy \"$source_org\" \"$source_space\" \"$source_app_name\" \"$destination_app_name\"

  run it_can_delete_an_app \"$source_org\" \"$source_space\" \"$destination_app_name\"
  run it_can_delete_an_app \"$source_org\" \"$source_space\" \"$source_app_name\"
}

describe "allow the source app to connect to the destination app in a different org and space"
{
  run it_can_push_an_app \"$source_org\" \"$source_space\" \"$source_app_name\"

  cf::target "$destination_org" "$destination_space"
  run it_can_push_an_app \"$destination_org\" \"$destination_space\" \"$destination_app_name\"

  cf::target "$source_org" "$source_space"
  run it_can_add_network_policy_with_targeted_org_and_space \"$source_org\" \"$source_space\" \"$source_app_name\" \"$destination_org\" \"$destination_space\" \"$destination_app_name\"

  run it_can_remove_network_policy_with_targeted_org_and_space \"$source_org\" \"$source_space\" \"$source_app_name\" \"$destination_org\" \"$destination_space\" \"$destination_app_name\"

  run it_can_delete_an_app \"$destination_org\" \"$destination_space\" \"$destination_app_name\"
  run it_can_delete_an_app \"$source_org\" \"$source_space\" \"$source_app_name\"
}

teardown_integration_tests "$destination_org" "$destination_space"
teardown_integration_tests "$source_org" "$source_space"
