#!/bin/bash

set -eu
set -o pipefail

base_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

source "$base_dir/itest/lib/assert.sh"
source "$base_dir/itest/lib/helpers.sh"
source "$base_dir/itest/lib/config.sh"

it_can_push_a_docker_image_from_a_private_registry() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}
  local docker_private_image=${4:?docker_private_image null or not set}
  local docker_private_username=${5:?docker_private_username null or not set}
  local docker_private_password=${6:?docker_private_password null or not set}

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg docker_image "$docker_private_image" \
  --arg docker_username "$docker_private_username" \
  --arg docker_password "$docker_private_password" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    docker_image: $docker_image,
    docker_username: $docker_username,
    docker_password: $docker_password
  }')

  put_with_params "$CCR_SOURCE" "$params" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf::is_app_started "$app_name"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
app_name=$(generate_test_name_with_spaces "App")

docker_private_image=$CCR_DOCKER_PRIVATE_IMAGE
docker_private_username=$CCR_DOCKER_PRIVATE_USERNAME
docker_private_password=$CCR_DOCKER_PRIVATE_PASSWORD

login

setup_integration_tests "$org" "$space"

cf::target "$org" "$space"

run it_can_disable_feature_flag \"diego_docker\"
run it_can_enable_feature_flag \"diego_docker\"

run it_can_push_a_docker_image_from_a_private_registry \"$org\" \"$space\" \"$app_name\" \"$docker_private_image\" \"$docker_private_username\" \"$docker_private_password\"

run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
